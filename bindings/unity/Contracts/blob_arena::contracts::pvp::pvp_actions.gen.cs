// Generated by dojo-bindgen on Mon, 1 Jul 2024 21:02:30 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;
using System.Collections.Generic;
using System.Linq;
using Enum = Dojo.Starknet.Enum;

// System definitions for `blob_arena::contracts::pvp::pvp_actions` contract
public class Pvp_actions : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `rescind_invite` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> rescind_invite(Account account, BigInteger challenge_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(challenge_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "rescind_invite",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `respond_invite` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> respond_invite(Account account, BigInteger challenge_id, U256 token_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(challenge_id).Inner);
		calldata.Add(new FieldElement(token_id.low).Inner);
		calldata.Add(new FieldElement(token_id.high).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "respond_invite",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `rescind_response` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> rescind_response(Account account, BigInteger challenge_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(challenge_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "rescind_response",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `reject_invite` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> reject_invite(Account account, BigInteger challenge_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(challenge_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "reject_invite",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `reject_response` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> reject_response(Account account, BigInteger challenge_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(challenge_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "reject_response",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `accept_response` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> accept_response(Account account, BigInteger challenge_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(challenge_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "accept_response",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `commit_attack` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> commit_attack(Account account, BigInteger combatant_id, FieldElement hash) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(combatant_id).Inner);
		calldata.Add(hash.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "commit_attack",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `reveal_attack` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> reveal_attack(Account account, BigInteger combatant_id, BigInteger attack, FieldElement salt) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(combatant_id).Inner);
		calldata.Add(new FieldElement(attack).Inner);
		calldata.Add(salt.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "reveal_attack",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `run_round` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> run_round(Account account, BigInteger combat_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(combat_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "run_round",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `forfeit` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> forfeit(Account account, BigInteger combatant_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(combatant_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "forfeit",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `kick_inactive_player` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> kick_inactive_player(Account account, BigInteger combatant_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(combatant_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "kick_inactive_player",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `dojo_init` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> dojo_init(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_init",
                calldata = calldata.ToArray()
            }
        });
    }
            
}
        